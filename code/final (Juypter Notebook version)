{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5b7d2e5-91bc-472c-bf0e-733dc5475ea2",
   "metadata": {
    "id": "d5b7d2e5-91bc-472c-bf0e-733dc5475ea2"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\n",
    "from sklearn.linear_model import LinearRegression, Ridge, Lasso\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score, accuracy_score, mean_absolute_error\n",
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "import nltk\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21656a2d-34a2-4a80-9bf5-f93fb0b837ce",
   "metadata": {
    "id": "21656a2d-34a2-4a80-9bf5-f93fb0b837ce"
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('clean_chatgpt_reviews 2.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27eeb61c-1766-4b73-be3d-50cbb902a1c2",
   "metadata": {
    "id": "27eeb61c-1766-4b73-be3d-50cbb902a1c2"
   },
   "outputs": [],
   "source": [
    "df.drop(df.columns[0], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e46d9b30-b589-4459-b900-13f819a4e882",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "e46d9b30-b589-4459-b900-13f819a4e882",
    "outputId": "66999ac2-2345-4abc-8ef0-8f0452e2f9bb"
   },
   "outputs": [],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2c810e77-b12e-4fb1-a70b-298abe132b41",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "2c810e77-b12e-4fb1-a70b-298abe132b41",
    "outputId": "8f7c8256-1722-40c3-98d9-5ed7a177c657"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "userName         0\n",
       "content          0\n",
       "score            0\n",
       "thumbsUpCount    0\n",
       "at               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7f1e9991-2320-471d-8673-5a4557121ff8",
   "metadata": {
    "id": "7f1e9991-2320-471d-8673-5a4557121ff8"
   },
   "outputs": [],
   "source": [
    "df = df[df.duplicated(subset='content')==False]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "29b5ea36-45e1-4949-9b7b-9bbd6a715685",
   "metadata": {
    "id": "29b5ea36-45e1-4949-9b7b-9bbd6a715685"
   },
   "outputs": [],
   "source": [
    "import re\n",
    "def remove_non_english(text):\n",
    "    return re.sub(r'[^a-zA-Z\\s]', '', text)\n",
    "\n",
    "# Apply the function to the column\n",
    "df['content'] = df['content'].apply(remove_non_english)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "78f6cd6b-cc18-40ee-b795-6a61fa7be3d5",
   "metadata": {
    "id": "78f6cd6b-cc18-40ee-b795-6a61fa7be3d5"
   },
   "outputs": [],
   "source": [
    "chatGPT_df = df.sample(2000)\n",
    "chatGPT_df.reset_index(inplace=True)\n",
    "chatGPT_df.drop(chatGPT_df.columns[0], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d1a59fc2-193c-4d6e-9ddc-41d828831cdc",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "d1a59fc2-193c-4d6e-9ddc-41d828831cdc",
    "outputId": "ce5a299f-a2f1-4664-cf42-0676751742f5",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userName</th>\n",
       "      <th>content</th>\n",
       "      <th>score</th>\n",
       "      <th>thumbsUpCount</th>\n",
       "      <th>at</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BASHKAR SARKAR</td>\n",
       "      <td>I like this app this app is very good app I ha...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>09-04-2024 18:34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Sainath Chavan</td>\n",
       "      <td>sooo useful app for students  thank you</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>23-11-2023 17:40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Romario Silva</td>\n",
       "      <td>Really cool</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>28-11-2023 15:41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Puran Thapa</td>\n",
       "      <td>this app very inteligent</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>11-06-2024 16:28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>abdihafidh adan</td>\n",
       "      <td>the app is excellent but one of it implication...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>17-04-2024 03:08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          userName                                            content  score  \\\n",
       "0   BASHKAR SARKAR  I like this app this app is very good app I ha...      5   \n",
       "1   Sainath Chavan           sooo useful app for students  thank you       5   \n",
       "2    Romario Silva                                        Really cool      5   \n",
       "3      Puran Thapa                           this app very inteligent      5   \n",
       "4  abdihafidh adan  the app is excellent but one of it implication...      5   \n",
       "\n",
       "   thumbsUpCount                at  \n",
       "0              0  09-04-2024 18:34  \n",
       "1              0  23-11-2023 17:40  \n",
       "2              0  28-11-2023 15:41  \n",
       "3              0  11-06-2024 16:28  \n",
       "4              0  17-04-2024 03:08  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chatGPT_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "oEUm4t0xBzet",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 449
    },
    "id": "oEUm4t0xBzet",
    "outputId": "6fb6ee3c-5277-463f-ea27-ba87a40be9e8"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "from matplotlib import pyplot as plt\n",
    "chatGPT_df.plot(kind='scatter', x='score', y='thumbsUpCount', s=32, alpha=.8)\n",
    "plt.gca().spines[['top', 'right',]].set_visible(False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "97c24a8b-6b3f-45cf-90ff-1ab879717ec2",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "97c24a8b-6b3f-45cf-90ff-1ab879717ec2",
    "outputId": "ae1f0ae9-e59b-4784-8587-1213761d5a75"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package vader_lexicon to\n",
      "[nltk_data]     /Users/ritesh/nltk_data...\n",
      "[nltk_data]   Package vader_lexicon is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "nltk.download('vader_lexicon')\n",
    "sia = SentimentIntensityAnalyzer()\n",
    "def score_sentiment(text):\n",
    "    # Handle potential non-string types by converting to string\n",
    "    if not isinstance(text, str):\n",
    "        text = str(text)  # Convert to string if not already\n",
    "\n",
    "    score = sia.polarity_scores(text)\n",
    "    compound_score = score['compound']\n",
    "\n",
    "    # Map the compound score to a scale of 1 to 5\n",
    "    if compound_score >= 0.6:   # Strongly positive\n",
    "        return 5\n",
    "    elif compound_score >= 0.2:  # Positive\n",
    "        return 4\n",
    "    elif compound_score > -0.2 and compound_score < 0.2:  # Neutral\n",
    "        return 3\n",
    "    elif compound_score > -0.6:  # Negative\n",
    "        return 2\n",
    "    else:                         # Strongly negative\n",
    "        return 1\n",
    "\n",
    "# Apply scoring to the 'content' column, handling potential mixed types\n",
    "chatGPT_df['content_score'] = chatGPT_df['content'].apply(score_sentiment) # Removed lambda and type check as score_sentiment now handles non-string types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "VyETr0JdpkH6",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "VyETr0JdpkH6",
    "outputId": "a2e1e0e0-4251-4753-d216-0579dfc4e6b1"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userName</th>\n",
       "      <th>content</th>\n",
       "      <th>score</th>\n",
       "      <th>thumbsUpCount</th>\n",
       "      <th>at</th>\n",
       "      <th>content_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BASHKAR SARKAR</td>\n",
       "      <td>I like this app this app is very good app I ha...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>09-04-2024 18:34</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Sainath Chavan</td>\n",
       "      <td>sooo useful app for students  thank you</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>23-11-2023 17:40</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Romario Silva</td>\n",
       "      <td>Really cool</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>28-11-2023 15:41</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Puran Thapa</td>\n",
       "      <td>this app very inteligent</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>11-06-2024 16:28</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>abdihafidh adan</td>\n",
       "      <td>the app is excellent but one of it implication...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>17-04-2024 03:08</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          userName                                            content  score  \\\n",
       "0   BASHKAR SARKAR  I like this app this app is very good app I ha...      5   \n",
       "1   Sainath Chavan           sooo useful app for students  thank you       5   \n",
       "2    Romario Silva                                        Really cool      5   \n",
       "3      Puran Thapa                           this app very inteligent      5   \n",
       "4  abdihafidh adan  the app is excellent but one of it implication...      5   \n",
       "\n",
       "   thumbsUpCount                at  content_score  \n",
       "0              0  09-04-2024 18:34              5  \n",
       "1              0  23-11-2023 17:40              5  \n",
       "2              0  28-11-2023 15:41              4  \n",
       "3              0  11-06-2024 16:28              3  \n",
       "4              0  17-04-2024 03:08              4  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chatGPT_df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7ac03c58-7354-49d3-b63d-15973ce248fb",
   "metadata": {
    "id": "7ac03c58-7354-49d3-b63d-15973ce248fb"
   },
   "outputs": [],
   "source": [
    "X = chatGPT_df.drop([\"userName\",\"at\",\"content\",\"score\"],axis='columns')\n",
    "y = chatGPT_df['score']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9115a59e-7e6f-4a5e-89fc-9d6b7e64cdb7",
   "metadata": {
    "id": "9115a59e-7e6f-4a5e-89fc-9d6b7e64cdb7"
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6bd42c9b-3e5e-47d2-8143-edd75716bf9b",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "6bd42c9b-3e5e-47d2-8143-edd75716bf9b",
    "outputId": "94a3fbf2-a8d0-40a9-aa0c-a938f5c837e2"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1600"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f34a1896-5fea-4735-9076-8dbc830e46f6",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "f34a1896-5fea-4735-9076-8dbc830e46f6",
    "outputId": "def3c590-022d-4c8d-97fc-2b4e96d81e00"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "400"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "jLiJajRkwiGl",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "jLiJajRkwiGl",
    "outputId": "187085d8-ab32-4a0f-a348-1032333e696c"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Best Estimator</th>\n",
       "      <th>Best Parameters</th>\n",
       "      <th>Best Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>linear_regression</td>\n",
       "      <td>LinearRegression()</td>\n",
       "      <td>{'fit_intercept': True}</td>\n",
       "      <td>0.195895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ridge</td>\n",
       "      <td>Ridge(alpha=10.0, solver='lsqr')</td>\n",
       "      <td>{'alpha': 10.0, 'fit_intercept': True, 'solver...</td>\n",
       "      <td>0.195923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>lasso</td>\n",
       "      <td>Lasso(alpha=0.1)</td>\n",
       "      <td>{'alpha': 0.1, 'fit_intercept': True, 'selecti...</td>\n",
       "      <td>0.189787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>decision_tree</td>\n",
       "      <td>DecisionTreeRegressor(min_samples_split=10)</td>\n",
       "      <td>{'criterion': 'squared_error', 'max_depth': No...</td>\n",
       "      <td>0.26425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>random_forest</td>\n",
       "      <td>(DecisionTreeRegressor(max_depth=10, max_featu...</td>\n",
       "      <td>{'max_depth': 10, 'min_samples_leaf': 4, 'min_...</td>\n",
       "      <td>0.268659</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Model                                     Best Estimator  \\\n",
       "0  linear_regression                                 LinearRegression()   \n",
       "1              ridge                   Ridge(alpha=10.0, solver='lsqr')   \n",
       "2              lasso                                   Lasso(alpha=0.1)   \n",
       "3      decision_tree        DecisionTreeRegressor(min_samples_split=10)   \n",
       "4      random_forest  (DecisionTreeRegressor(max_depth=10, max_featu...   \n",
       "\n",
       "                                     Best Parameters Best Score  \n",
       "0                            {'fit_intercept': True}   0.195895  \n",
       "1  {'alpha': 10.0, 'fit_intercept': True, 'solver...   0.195923  \n",
       "2  {'alpha': 0.1, 'fit_intercept': True, 'selecti...   0.189787  \n",
       "3  {'criterion': 'squared_error', 'max_depth': No...    0.26425  \n",
       "4  {'max_depth': 10, 'min_samples_leaf': 4, 'min_...   0.268659  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_params = {\n",
    "    'linear_regression': {\n",
    "        'model': LinearRegression(),\n",
    "        'params': {\n",
    "            'fit_intercept': [True, False]\n",
    "        }\n",
    "    },\n",
    "    'ridge': {\n",
    "        'model': Ridge(),\n",
    "        'params': {\n",
    "            'alpha': [0.1, 1.0, 10.0],\n",
    "            'solver': ['auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga'],\n",
    "            'fit_intercept': [True, False]\n",
    "        },\n",
    "    },\n",
    "    'lasso': {\n",
    "        'model': Lasso(),\n",
    "        'params': {\n",
    "            'alpha': [0.1, 1.0, 10.0],\n",
    "            'selection': ['random', 'cyclic'],\n",
    "            'fit_intercept': [True, False]\n",
    "        },\n",
    "    },\n",
    "    'decision_tree': {\n",
    "        'model': DecisionTreeRegressor(),\n",
    "        'params': {\n",
    "            'criterion': ['squared_error', 'friedman_mse', 'absolute_error', 'poisson'],\n",
    "            'splitter': ['best', 'random'],\n",
    "            'max_depth': [None, 5, 10, 15, 20],\n",
    "            'min_samples_split': [2, 5, 10],\n",
    "            'min_samples_leaf': [1, 2, 4]\n",
    "        },\n",
    "    },\n",
    "    'random_forest': {\n",
    "        'model': RandomForestRegressor(),\n",
    "        'params': {\n",
    "            'n_estimators': [50, 100, 150],\n",
    "            'max_depth': [None, 5, 10, 15, 20],\n",
    "            'min_samples_split': [2, 5, 10],\n",
    "            'min_samples_leaf': [1, 2, 4]\n",
    "        },\n",
    "    },\n",
    "}\n",
    "\n",
    "# Perform GridSearchCV for each model and store the best models\n",
    "best_models = {}\n",
    "for model_name, model_info in model_params.items():\n",
    "    grid_search = GridSearchCV(estimator=model_info['model'],\n",
    "                               param_grid=model_info['params'],\n",
    "                               cv=5)\n",
    "\n",
    "    grid_search.fit(X_train, y_train)\n",
    "\n",
    "    best_models[model_name] = {\n",
    "        'model': grid_search.best_estimator_,\n",
    "        'best_params': grid_search.best_params_,\n",
    "        'best_score': grid_search.best_score_\n",
    "    }\n",
    "\n",
    "# Convert best models dictionary to DataFrame\n",
    "df = pd.DataFrame(best_models).transpose()\n",
    "df.reset_index(inplace=True)\n",
    "df.columns = ['Model', 'Best Estimator', 'Best Parameters', 'Best Score']\n",
    "\n",
    "# Display the DataFrame\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ircPXCov6uJW",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 564
    },
    "id": "ircPXCov6uJW",
    "outputId": "2c7e67d9-4b7d-4fc9-af4c-61baad639920"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(df['Model'], df['Best Score'])\n",
    "plt.xlabel('Model')\n",
    "plt.ylabel('Best Score')\n",
    "_ = plt.title('Model Performance Comparison')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "QJcSO504kdw8",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 564
    },
    "id": "QJcSO504kdw8",
    "outputId": "81f849a7-0895-4c95-91f0-2eda56912a22"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Violin plot\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.violinplot(x='score', y='thumbsUpCount', data=chatGPT_df)\n",
    "plt.xlabel('Rating Score')\n",
    "plt.ylabel('Thumbs Up Counts')\n",
    "plt.title('Distribution of Thumbs Up Counts by Rating Score')\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "aNPoVNC1hGoP",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 564
    },
    "id": "aNPoVNC1hGoP",
    "outputId": "02c3075b-d758-47bc-d467-9a10fd98a1a0"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+kAAAIjCAYAAAB/OVoZAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy80BEi2AAAACXBIWXMAAA9hAAAPYQGoP6dpAABupElEQVR4nO3deVxU9f7H8fewgyyuiAsuae7iWl601HLXLLplppZ7WWlptmm3BbJcfmnqzTLLkjauW2nd3EINzfW6YWJmaiqWuGWCiOIA5/eHMTmxjgJzRl7Px4NHzpnvOfOZ+c6HeM9ZxmIYhiEAAAAAAOB0bs4uAAAAAAAAXEFIBwAAAADAJAjpAAAAAACYBCEdAAAAAACTIKQDAAAAAGAShHQAAAAAAEyCkA4AAAAAgEkQ0gEAAAAAMAlCOgAAAAAAJkFIBwDkKzIyUhaLxdlllIi4uDhZLBbFxcUVOPbIkSOyWCyKjo52+HEGDx6sWrVqObzejcZisSgyMtLZZTjd9byXAAA3HkI6ALiY6OhoWSwW24+Hh4eqVaumwYMH67fffrumbaalpSkyMrJQ4bQkDR482O65BgYGqlmzZpo2bZrS09NLpIaYmBjNmDGjWB+juF7/7PfK9u3bi3S7pcHV77vs916HDh20bNmya95mSbyXrsWRI0c0ZMgQ1alTRz4+PgoJCVH79u316quvOrs0ACiVPJxdAADg2rz22muqXbu2Ll26pC1btig6OlobNmxQQkKCfHx8HNpWWlqaoqKiJEkdO3a0u++ll17SuHHjiqpsh3l7e2vu3LmSpHPnzumLL77Qs88+q23btmn+/PlF+ljt27fXxYsX5eXlZVsWExOjhIQEjRkzxm5szZo1dfHiRXl6ejr8OB988IGysrJst/N7/eE8Xbp00cCBA2UYho4eParZs2erd+/eWrFihbp16+bw9orjvXS9Dh48qFtuuUW+vr4aOnSoatWqpaSkJO3cuVNTpkyxvS8BACWHkA4ALqpHjx5q3bq1JGn48OGqWLGipkyZoq+//loPPPBAkT2Oh4eHPDyc978LDw8PPfTQQ7bbTzzxhNq0aaMFCxborbfeUtWqVYvssdzc3Ar9AYfFYnH4w5BszghjcFy9evXs3nv33XefGjVqpJkzZ15TSM/L9byXrtf06dOVmpqq+Ph41axZ0+6+U6dOlWgtFy5cUJkyZUr0MQHAjDjcHQBuELfffrsk6dChQ7Zlly9f1iuvvKJWrVopKChIZcqU0e23367vvvvONubIkSOqVKmSJCkqKsp2eG/2ucK5nZNusVg0atQoLV26VE2aNJG3t7caN26slStX5qgrLi5OrVu3lo+Pj+rUqaM5c+Zc13nubm5utr3NR44ckXQlTAwbNkyVK1eWj4+PmjVrpo8//jjHuvPnz1erVq0UEBCgwMBANW3aVDNnzrSr9epz0jt27Khly5bp6NGjttcl+1zyv59HPHXqVFksFh09ejTH444fP15eXl76448/JNmfk57f6z9v3jxZLBbt2rUrxzYnTpwod3f3az7F4Wq//fabhg4dqsqVK9vm8qOPPrLdf/LkSXl4eOS6V3X//v2yWCyaNWuWbdm5c+c0ZswYhYaGytvbW3Xr1tWUKVPsjh4oDEce12q1KioqSjfffLN8fHxUoUIF3XbbbYqNjXXoMfPTsGFDVaxY0a7HJOmrr75Sr169VLVqVXl7e6tOnTqaMGGCMjMzbWMceS9JV94j/v7++u233xQRESF/f39VqlRJzz77rN12Jen333/Xww8/rMDAQJUtW1aDBg3S7t27C3We+6FDh1S9evUcAV2SgoODcyxbsWKFOnToYOuhW265RTExMXZjFi1apFatWsnX11cVK1bUQw89lON9mv38Dh06pJ49eyogIEADBgyQJGVlZWnGjBlq3LixfHx8VLlyZY0YMcLWPwBwo2NPOgDcILIDa7ly5WzLUlJSNHfuXPXr10+PPPKIzp8/rw8//FDdunXT//73PzVv3lyVKlXS7Nmz9fjjj+vee+/VP//5T0lSWFhYvo+3YcMGffnll3riiScUEBCgf//737rvvvuUmJioChUqSJJ27dql7t27q0qVKoqKilJmZqZee+01Wyi9VtkhqUKFCrp48aI6duyogwcPatSoUapdu7YWLVqkwYMH69y5cxo9erQkKTY2Vv369VOnTp00ZcoUSdK+ffu0ceNG25i/+9e//qXk5GT9+uuvmj59uiTJ398/17EPPPCAnn/+eS1cuFDPPfec3X0LFy5U165d7eYmW36vf+3atTVy5Eh9/vnnatGihd16n3/+uTp27Khq1aoV9mXL1cmTJ/WPf/zD9sFLpUqVtGLFCg0bNkwpKSkaM2aMKleurA4dOmjhwoU5zlNesGCB3N3d1adPH0lXDt3v0KGDfvvtN40YMUI1atTQpk2bNH78eCUlJTl0TrYjjxsZGalJkyZp+PDhuvXWW5WSkqLt27dr586d6tKly3W9RtmSk5P1xx9/qE6dOnbLo6Oj5e/vr7Fjx8rf319r167VK6+8opSUFL355puSHHsvZcvMzFS3bt3Upk0bTZ06VatXr9a0adNUp04dPf7445KuBNrevXvrf//7nx5//HE1aNBAX331lQYNGlSo51SzZk2tXr1aa9eu1Z133pnv2OjoaA0dOlSNGzfW+PHjVbZsWe3atUsrV65U//79bWOGDBmiW265RZMmTdLJkyc1c+ZMbdy4Ubt27VLZsmVt28vIyFC3bt102223aerUqfLz85MkjRgxwradp556SocPH9asWbO0a9cubdy4kSNRANz4DACAS5k3b54hyVi9erVx+vRp49ixY8bixYuNSpUqGd7e3saxY8dsYzMyMoz09HS79f/44w+jcuXKxtChQ23LTp8+bUgyXn311RyP9+qrrxp//9+FJMPLy8s4ePCgbdnu3bsNScbbb79tW9a7d2/Dz8/P+O2332zLDhw4YHh4eOTYZm4GDRpklClTxjh9+rRx+vRp4+DBg8bEiRMNi8VihIWFGYZhGDNmzDAkGZ999pltvcuXLxvh4eGGv7+/kZKSYhiGYYwePdoIDAw0MjIy8ny87777zpBkfPfdd7ZlvXr1MmrWrJlj7OHDhw1Jxrx582zLwsPDjVatWtmN+9///mdIMj755BO753X1NvN7/fv162dUrVrVyMzMtC3buXNnjsfOTfZ7Zdu2bXmOGTZsmFGlShXjzJkzdssffPBBIygoyEhLSzMMwzDmzJljSDL27NljN65Ro0bGnXfeabs9YcIEo0yZMsbPP/9sN27cuHGGu7u7kZiYaFuW13O+WmEft1mzZkavXr3y3ZYjJBnDhg0zTp8+bZw6dcrYvn270b17d0OS8eabb9qNzX6NrjZixAjDz8/PuHTpkm2ZI++lQYMGGZKM1157zW5sixYt7N5jX3zxhSHJmDFjhm1ZZmamceeddxbqPZKQkGD4+voakozmzZsbo0ePNpYuXWpcuHDBbty5c+eMgIAAo02bNsbFixft7svKyjIM40rfBQcHG02aNLEb88033xiSjFdeeSXH8xs3bpzdtr7//ntDkvH555/bLV+5cmWuywHg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Icv33Xef3N3d9Z///EeLFi3SXXfdVeB3Pxf0+oeFhSksLExz587VF198oQcffLBIvrve3d1d9913n7744gslJCTkuP/06dN2t8uWLatu3bpp4cKFmj9/vry8vBQREWE35oEHHtDmzZu1atWqHNs7d+6cMjIyHK6zMI/79/n19/dX3bp17eY2OTlZP/300zUfgu7h4aFnnnlG+/bt01dffSUp9x67fPmy3n333RzrO/peKoxu3brJarXanT+elZWld955p1Drf//997JarTmWL1++XNJfh6537dpVAQEBmjRpku33S7bs5966dWsFBwfrvffes3vdV6xYoX379qlXr14F1vPAAw8oMzNTEyZMyHFfRkZGkf6OAgCzYk86ANxAnnvuOfXp00fR0dF67LHHdNddd+nLL7/Uvffeq169eunw4cN677331KhRI6WmptrW8/X1VaNGjbRgwQLVq1dP5cuXV5MmTfI9/7QwIiMj9e2336pdu3Z6/PHHlZmZqVmzZqlJkyaKj4+/zmd7xaOPPqo5c+Zo8ODB2rFjh2rVqqXFixdr48aNmjFjhu287eHDh+vs2bO68847Vb16dR09elRvv/22mjdvbjt/PTetWrXSggULNHbsWN1yyy3y9/fPd894cHCw7rjjDr311ls6f/683cXN8lKY13/gwIF69tlnJcnhQ90/+uijXM+/Hz16tCZPnqzvvvtObdq00SOPPKJGjRrp7Nmz2rlzp1avXq2zZ8/ardO3b1899NBDevfdd9WtWze7r9SSrrwHv/76a911110aPHiwWrVqpQsXLmjPnj1avHixjhw5YneYemEV9LiNGjVSx44d1apVK5UvX17bt2/X4sWLNWrUKNuYJUuWaMiQIZo3b54GDx7scA3Sle/3fuWVVzRlyhRFRESobdu2KleunAYNGqSnnnpKFotFn376aa6nfTj6XiqMiIgI3XrrrXrmmWd08OBBNWjQQF9//bVt3graez9lyhTt2LFD//znP20fWu3cuVOffPKJypcvrzFjxkiSAgMDNX36dA0fPly33HKL+vfvr3Llymn37t1KS0vTxx9/LE9PT02ZMkVDhgxRhw4d1K9fP9tXsNWqVUtPP/10gc+nQ4cOGjFihCZNmqT4+Hh17dpVnp6eOnDggBYtWqSZM2fq/vvvv67XDABMz3kXlgcAXIv8vlYrMzPT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NWrUUOXKlfX9998X2WMCAMzNw9kFAABwrb755hv5+/srIyND6enpcnNz06xZs2z3V6tWzS5IP/nkk1q1apUWLlyoW2+9VUFBQfLy8pKfn59CQkLyfSyr1ar33ntPderUkXQlNL722mu2+99++22NHz9e9957ryRp1qxZWr58uUPPJykpSVOnTlW1atVUv359PfbYYxo8eLCeeOIJSdLYsWO1ZcsWTZ06VXfccYcSExMVEhKizp07y9PTUzVq1NCtt96a67YrVaokSSpbtmyez9Xd3V0PPvigYmJiNGzYMEnSmjVrdO7cOd133305xvv6+srf318eHh5222zbtq1tr//zzz8v6cqHA38/TLywEhMTNW/ePCUmJqpq1aqSrpxLv3LlSs2bN08TJ07UgAED9PDDDystLU1+fn5KSUnRsmXLtGTJEknSggULlJWVpblz59pOY5g3b57Kli2ruLg4de3atcA6jh49Knd39yI73P+pp55Sy5YtVb58eW3atEnjx49XUlKS3nrrLbtxVatW1dGjR4vkMQEA5seedACAy7rjjjsUHx+vrVu3atCgQRoyZIhdmMzMzNSECRPUtGlTlS9fXv7+/lq1apUSExMdfiw/Pz9bQJekKlWq6NSpU5Kk5ORknTx50i4gu7u7q1WrVoXadvXq1VWmTBlVrVpVFy5c0BdffCEvLy/t27dP7dq1sxvbrl077du3T5LUp08fXbx4UTfddJMeeeQRLVmyJMeeWEcNGDBAcXFxOn78uKQre6N79erl8BXdhw8frnnz5kmSTp48qRUrVmjo0KHXVNOePXuUmZmpevXqyd/f3/azbt0622HgPXv2lKenp77++mtJV44yCAwMtB2Cvnv3bh08eFABAQG29cuXL69Lly4V+lDyixcvytvb2+FrFTz22GN2dWcbO3asOnbsqLCwMD322GOaNm2a3n77baWnp9ut7+vraztkHwBw42NPOgDAZZUpU0Z169aVJH300Udq1qyZPvzwQ9te4DfffFMzZ87UjBkz1LRpU5UpU0Zjxowp9OHNV/P09LS7bbFYZBjG9T8JSd9//70CAwMVHBysgICAQq8XGhqq/fv3a/Xq1YqNjdUTTzyhN998U+vWrctRb2HdcsstqlOnjubPn6/HH39cS5YsUXR0tMPbGThwoMaNG6fNmzdr06ZNql27tm6//fZrqik1NVXu7u7asWOH3N3d7e7LDr1eXl66//77FRMTYzsaoG/fvvLw8LBto1WrVrleKT37KIOCVKxYUWlpabp8+bLdaRUFee211+yO6MhLmzZtlJGRoSNHjqh+/fq25WfPni10jQAA10dIBwDcENzc3PTiiy9q7Nix6t+/v3x9fbVx40bdc889euihhyRJWVlZ+vnnn9WoUSPbel5eXtd9JfWgoCBVrlxZ27ZtU/v27SVd2Yu/c+fOQn09We3atXPdU92wYUNt3LhRgwYNsi3buHGjXf2+vr7q3bu3evfurZEjR6pBgwbas2ePWrZsmWN7np6ehXquAwYM0Oeff67q1avLzc1NvXr1ynNsXq9fhQoVFBERoXnz5mnz5s0aMmRIgY+blxYtWigzM1OnTp3KN+gPGDBAXbp00d69e7V27Vq9/vrrtvtatmypBQsWKDg4WIGBgddUR/Zc/vjjjw597VxwcHChDpGPj4+Xm5ub3djsPf0tWrRwtFwAgIvicHcAwA2jT58+cnd31zvvvCNJuvnmmxUbG6tNmzZp3759GjFihE6ePGm3Tq1atbR161YdOXJEZ86cUVZW1jU99pNPPqlJkybpq6++0v79+zV69Gj98ccf1/U1bs8995yio6M1e/ZsHThwQG+99Za+/PJL217Z6Ohoffjhh0pISNAvv/yizz77TL6+vqpZs2au26tVq5bWrFmjEydO6I8//sjzcQcMGKCdO3fqjTfe0P333y9vb+88x9aqVUuHDx9WfHy8zpw5Y3eo9vDhw/Xxxx9r3759dh805GfPnj2Kj4+3/ezevVv16tXTgAEDNHDgQH355Zc6fPiw/ve//2nSpElatmyZbd327dsrJCREAwYMUO3atdWmTRu751SxYkXdc889+v7773X48GHFxcXpqaee0q+//lqo2ipVqqSWLVtqw4YNdsvPnj2r+Ph4/fjjj5KufKVefHy8Tpw4kee2Nm/erBkzZmj37t365Zdf9Pnnn+vpp5/WQw89pHLlytnGbdmyRd7e3goPDy9UjQAA10dIBwDcMDw8PDRq1Cj93//9ny5cuKCXXnpJLVu2VLdu3dSxY0eFhITk+Eq0Z599Vu7u7mrUqJEqVap0TeerS9ILL7ygfv36aeDAgQoPD5e/v7+6desmHx+fa34+ERERmjlzpqZOnarGjRtrzpw5mjdvnjp27CjpykXgPvjgA7Vr105hYWFavXq1/vvf/+b5vefTpk1TbGysQkND890zW7duXd1666364Ycfcr2q+9Xuu+8+de/eXXfccYcqVapk9xV3nTt3VpUqVdStWzfbBd8K0r59e7Vo0cL2k31e/7x58zRw4EA988wzql+/viIiIrRt2zbVqFHDtq7FYlG/fv20e/fuHHX7+flp/fr1qlGjhv75z3+qYcOGGjZsmC5duuTQnvXhw4fnOGT+66+/VosWLWxHHDz44INq0aKF3nvvvTy34+3trfnz56tDhw5q3Lix3njjDT399NN6//337cb95z//0YABAwr8vnsAwI3DYhTVCXUAAMAmKytLDRs21AMPPKAJEyY4uxynSE1NVbVq1TRv3jz985//dHY5ReLixYuqX7++FixYUOx7t8+cOaP69etr+/btql27drE+FgDAPDgnHQCAInD06FF9++236tChg9LT0zVr1iwdPnxY/fv3d3ZpJS4rK0tnzpzRtGnTVLZsWd19993OLqnI+Pr66pNPPtGZM2eK/bGOHDmid999l4AOAKUMe9IBACgCx44d04MPPqiEhAQZhqEmTZpo8uTJtgvJlSZHjhxR7dq1Vb16dUVHR6tTp07OLgkAAJdBSAcAAAAAwCS4cBwAAAAAACZBSAcAAAAAwCQI6QAAAAAAmAQhHQAAAAAAkyCkAwAAAABgEoR0AAAAAABMgpAOAAAAAIBJENIBAAAAADCJ/we26+CXZ38BIAAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 6))\n",
    "plt.scatter(chatGPT_df['content_score'], chatGPT_df['score'], alpha=0.5)\n",
    "plt.xlabel('Rating Positivity Level (1-5)')\n",
    "plt.ylabel('Rating Score')\n",
    "plt.title('Rating Positivity Level vs. Rating Score')\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "D7eyIKOUz-6b",
   "metadata": {
    "id": "D7eyIKOUz-6b"
   },
   "outputs": [],
   "source": [
    "model = RandomForestRegressor()\n",
    "param_grid = {\n",
    "    'n_estimators': [50, 100, 200],\n",
    "    'max_depth': [None, 10, 20, 30],\n",
    "    'min_samples_split': [2, 5, 10],\n",
    "    'min_samples_leaf': [1, 2, 4]\n",
    "}\n",
    "# Initialize GridSearchCV\n",
    "grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5, n_jobs=-1, scoring='r2')\n",
    "\n",
    "# Fit the model\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best parameters\n",
    "best_params = grid_search.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "j4eTOZdsDk_m",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 75
    },
    "id": "j4eTOZdsDk_m",
    "outputId": "748c8f16-130e-48d3-fb95-e235fcfd27f9"
   },
   "outputs": [],
   "source": [
    "model = RandomForestRegressor(**best_params)\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "Uk0yzfzX7j1p",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Uk0yzfzX7j1p",
    "outputId": "ff3a9342-e602-4dbf-94cc-b71e1bcf871c"
   },
   "outputs": [],
   "source": [
    "model.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "kTrm3TNK2pzE",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "kTrm3TNK2pzE",
    "outputId": "897a445f-98a9-4ad0-cf60-bea0bbcbbd6e"
   },
   "outputs": [],
   "source": [
    "model.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "-VMhqohx3iY-",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "-VMhqohx3iY-",
    "outputId": "ae7e0fd6-2074-4e2e-c6f7-7cd6913b68be"
   },
   "outputs": [],
   "source": [
    "y_pred = model.predict(X_test)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "r_squared = r2_score(y_test, y_pred)\n",
    "\n",
    "print(f\"Mean Squared Error: {mse}\")\n",
    "print(f\"Mean Absolute Error: {mae}\")\n",
    "print(f\"R-squared: {r_squared}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "kYJWVrBC4gbJ",
   "metadata": {
    "id": "kYJWVrBC4gbJ"
   },
   "source": [
    "Predictions (thumbsUpCount, ContentScore) -> rating score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "xcOk9s1M4fRd",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "xcOk9s1M4fRd",
    "outputId": "714ac5c6-5110-44f0-cf89-3f92744eb33b"
   },
   "outputs": [],
   "source": [
    "model.predict([[0,4]]) # rounds to 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "tKNeLTZ79Ft4",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "tKNeLTZ79Ft4",
    "outputId": "4f98b1cf-a047-447e-e40a-d802b21d05d0"
   },
   "outputs": [],
   "source": [
    "model.predict([[0,5]]) # rounds to 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ZHhmqB5cEeCp",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ZHhmqB5cEeCp",
    "outputId": "bba1f39d-dc06-4131-9c18-4f76da4b49dd"
   },
   "outputs": [],
   "source": [
    "model.predict([[5,5]])  # rounds to 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e5f3157-ee95-438c-92ce-6b644015d3a5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "TPU",
  "colab": {
   "gpuType": "V28",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
